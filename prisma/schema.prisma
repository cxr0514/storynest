generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  User                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Character {
  id                     String           @id
  name                   String
  species                String
  age                    String
  physicalFeatures       String
  clothingAccessories    String
  personalityTraits      String[]
  personalityDescription String
  specialAbilities       String
  favoriteThings         String
  speakingStyle          String
  favoritePhrases        String[]
  ageGroups              String[]
  appearances            Json[]
  consistencyScore       Float            @default(0)
  timesUsed              Int              @default(0)
  metadata               Json?
  description            String?
  userId                 String
  childProfileId         String
  createdAt              DateTime         @default(now())
  updatedAt              DateTime
  avatarUrl              String?
  styleName              String           @default("storybook_soft")
  ChildProfile           ChildProfile     @relation(fields: [childProfileId], references: [id], onDelete: Cascade)
  User                   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  StoryCharacter         StoryCharacter[]
}

model ChildProfile {
  id               String             @id
  name             String
  age              Int
  interests        String[]
  userId           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  avatarUrl        String?
  Character        Character[]
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Story            Story[]
  reading_progress reading_progress[]
}

model Illustration {
  id          String    @id
  url         String
  prompt      String
  storyId     String?
  storyPageId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Story       Story?    @relation(fields: [storyId], references: [id])
  StoryPage   StoryPage @relation(fields: [storyPageId], references: [id], onDelete: Cascade)
}

model Session {
  id            String @id
  session_token String @unique
  user_id       String
  User          User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Story {
  id               String             @id
  title            String
  theme            String
  summary          String
  moralLesson      String?
  currentPage      Int                @default(1)
  isCompleted      Boolean            @default(false)
  progressPercent  Float              @default(0)
  content          String?
  userId           String
  childProfileId   String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  category         StoryCategory      @default(BedtimeStory)
  language         StoryLanguage      @default(English)
  readerAge        String             @default("5 â€“ 7 years")
  writingStyle     StoryWritingStyle  @default(Imaginative)
  Illustration     Illustration[]
  ChildProfile     ChildProfile       @relation(fields: [childProfileId], references: [id], onDelete: Cascade)
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  StoryCharacter   StoryCharacter[]
  StoryPage        StoryPage[]
  reading_progress reading_progress[]
}

model StoryCharacter {
  id          String    @id
  storyId     String
  characterId String
  Character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  Story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, characterId])
}

model StoryPage {
  id                    String        @id
  pageNumber            Int
  content               String
  characterDescriptions Json
  storyId               String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime
  Illustration          Illustration?
  Story                 Story         @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String    @id
  plan      String
  status    String
  stripeId  String?   @unique
  userId    String    @unique
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id
  name             String?
  email            String             @unique
  email_verified   DateTime?
  image            String?
  credits          Int                @default(0)
  plan             String             @default("free")
  planExpiresAt    DateTime?
  stripeCustomerId String?            @unique
  storiesGenerated Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  Account          Account[]
  Character        Character[]
  ChildProfile     ChildProfile[]
  Session          Session[]
  Story            Story[]
  Subscription     Subscription?
  reading_progress reading_progress[]
}

model UserInteraction {
  id        String   @id
  userId    String
  type      String
  data      Json
  timestamp DateTime @default(now())

  @@index([userId, type])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model reading_progress {
  id                String       @id
  userId            String
  childProfileId    String
  storyId           String
  currentPageNumber Int          @default(1)
  totalPages        Int
  progressPercent   Float        @default(0)
  timeSpent         Int          @default(0)
  isCompleted       Boolean      @default(false)
  lastReadAt        DateTime     @default(now())
  startedAt         DateTime     @default(now())
  completedAt       DateTime?
  deviceType        String?
  sessionId         String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime
  ChildProfile      ChildProfile @relation(fields: [childProfileId], references: [id], onDelete: Cascade)
  Story             Story        @relation(fields: [storyId], references: [id], onDelete: Cascade)
  User              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, childProfileId, storyId])
  @@index([childProfileId, lastReadAt])
  @@index([userId, storyId])
}

enum StoryCategory {
  BedtimeStory
  Fable
  Fairytale
  Adventure
  Educational
  Mystery
  ScienceFiction
  RealisticFiction
}

enum StoryLanguage {
  English
  Spanish
  French
  German
  Italian
  Portuguese
  Dutch
  Swedish
  Japanese
  Chinese
}

enum StoryWritingStyle {
  Imaginative
  Funny
  Heartwarming
  ActionPacked
  Nostalgic
  Empowering
  Spooky
  Educational
}
