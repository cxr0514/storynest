// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("Session")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // StoryNest specific fields
  childProfiles ChildProfile[]
  stories       Story[]
  characters    Character[]
  subscription  Subscription?
  readingProgress ReadingProgress[]
  credits       Int            @default(0)
  plan          String         @default("free") // free, starter, premium, lifetime
  planExpiresAt DateTime?
  stripeCustomerId String?     @unique
  storiesGenerated Int         @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@map("User")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// StoryNest specific models
model ChildProfile {
  id        String      @id @default(uuid())
  name      String
  age       Int
  interests String[]
  userId    String
  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Story     Story[]
  Character Character[]
  readingProgress ReadingProgress[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
}

model Character {
  id                     String           @id @default(uuid())
  name                   String
  species                String
  age                    String
  physicalFeatures       String
  clothingAccessories    String
  personalityTraits      String[]
  personalityDescription String
  specialAbilities       String
  favoriteThings         String
  speakingStyle          String
  favoritePhrases        String[]
  ageGroups              String[]
  appearances            Json[]
  consistencyScore       Float            @default(0)
  timesUsed              Int              @default(0)
  metadata               Json?
  description            String?
  
  userId                 String
  User                   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  childProfileId         String
  ChildProfile           ChildProfile     @relation(fields: [childProfileId], references: [id], onDelete: Cascade)
  
  StoryCharacter         StoryCharacter[]
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
}

model Story {
  id              String           @id @default(uuid())
  title           String
  theme           String
  summary         String
  moralLesson     String?
  currentPage     Int              @default(1)
  isCompleted     Boolean          @default(false)
  progressPercent Float            @default(0)
  content         String?          @db.Text
  
  userId          String
  User            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  childProfileId  String
  ChildProfile    ChildProfile     @relation(fields: [childProfileId], references: [id], onDelete: Cascade)
  
  StoryPage       StoryPage[]
  StoryCharacter  StoryCharacter[]
  Illustration    Illustration[]
  readingProgress ReadingProgress[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model StoryPage {
  id                    String        @id @default(uuid())
  pageNumber            Int
  content               String        @db.Text
  characterDescriptions Json
  
  storyId               String
  Story                 Story         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  Illustration          Illustration?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

model StoryCharacter {
  id          String    @id @default(uuid())
  storyId     String
  characterId String
  Story       Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  Character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  
  @@unique([storyId, characterId])
}

model Illustration {
  id          String    @id @default(uuid())
  url         String
  prompt      String
  storyId     String?
  Story       Story?    @relation(fields: [storyId], references: [id])
  storyPageId String    @unique
  StoryPage   StoryPage @relation(fields: [storyPageId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subscription {
  id        String    @id @default(uuid())
  plan      String    // free, starter, premium, lifetime
  status    String    // active, canceled, expired
  stripeId  String?   @unique
  userId    String    @unique
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model UserInteraction {
  id             String   @id @default(cuid())
  userId         String
  type           String   // recommendation_click, story_view, character_use, etc.
  data           Json
  timestamp      DateTime @default(now())
  
  @@index([userId, type])
}

model ReadingProgress {
  id                String       @id @default(uuid())
  userId            String
  childProfileId    String
  storyId           String
  currentPageNumber Int          @default(1)
  totalPages        Int
  progressPercent   Float        @default(0)
  timeSpent         Int          @default(0) // in seconds
  isCompleted       Boolean      @default(false)
  lastReadAt        DateTime     @default(now())
  startedAt         DateTime     @default(now())
  completedAt       DateTime?
  deviceType        String?      // mobile, tablet, desktop
  sessionId         String?      // for analytics
  
  // Relations
  User              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ChildProfile      ChildProfile @relation(fields: [childProfileId], references: [id], onDelete: Cascade)
  Story             Story        @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  @@unique([userId, childProfileId, storyId])
  @@index([userId, storyId])
  @@index([childProfileId, lastReadAt])
  @@map("reading_progress")
}
