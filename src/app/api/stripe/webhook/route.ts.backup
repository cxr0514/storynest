import { NextRequest, NextResponse } from 'next/server'
import { headers } from 'next/headers'
import { stripe } from '@/lib/stripe'
import { prisma } from '@/lib/prisma'

interface StripeSession {
  metadata: {
    userId?: string;
    planType?: string;
    billingInterval?: string;
    type?: string;
    creditsAmount?: string;
  } | null;
  customer: string | null;
  subscription?: string | null;
}

interface StripeSubscription {
  customer: string | null;
  ended_at?: number | null;
  status: string;
  current_period_end: number;
}

async function handleCheckoutCompleted(sessionData: unknown) {
  const session = sessionData as StripeSession;
  
  if (!session.metadata?.userId) {
    console.error('No userId in session metadata');
    return;
  }
  
  const userId = session.metadata.userId;m 'next/headers'
import { stripe } from '@/lib/stripe'
import { prisma } from '@/lib/prisma'

export async function POST(req: NextRequest) {
  const body = await req.text()
  const signature = headers().get('stripe-signature')

  if (!signature) {
    return NextResponse.json({ error: 'No signature' }, { status: 400 })
  }

  let event

  try {
    event = stripe.webhooks.constructEvent(
      body,
      signature,
      process.env.STRIPE_WEBHOOK_SECRET!
    )
  } catch (err) {
    console.error('Webhook signature verification failed:', err)
    return NextResponse.json({ error: 'Invalid signature' }, { status: 400 })
  }

  try {
    switch (event.type) {
      case 'checkout.session.completed':
        await handleCheckoutCompleted(event.data.object)
        break

      case 'customer.subscription.created':
      case 'customer.subscription.updated':
        await handleSubscriptionUpdate(event.data.object)
        break

      case 'customer.subscription.deleted':
        await handleSubscriptionCanceled(event.data.object)
        break

      case 'invoice.payment_succeeded':
        await handlePaymentSucceeded(event.data.object)
        break

      case 'invoice.payment_failed':
        await handlePaymentFailed(event.data.object)
        break

      default:
        console.log(`Unhandled event type: ${event.type}`)
    }

    return NextResponse.json({ received: true })
  } catch (error) {
    console.error('Webhook handler error:', error)
    return NextResponse.json({ error: 'Webhook handler failed' }, { status: 500 })
  }
}

interface StripeSession {
  metadata: {
    userId: string;
    planType?: string;
    billingInterval?: string;
    type?: string;
    creditsAmount?: string;
  };
  customer: string;
  subscription?: string;
}

interface StripeSubscription {
  customer: string;
}

async function handleCheckoutCompleted(session: StripeSession) {
  const userId = session.metadata.userId
  const planType = session.metadata.planType
  const billingInterval = session.metadata.billingInterval

  if (session.metadata.type === 'credits') {
    // Handle credit purchase
    const creditsAmount = parseInt(session.metadata.creditsAmount)
    
    await prisma.user.update({
      where: { id: userId },
      data: {
        credits: {
          increment: creditsAmount
        }
      }
    })

    console.log(`Added ${creditsAmount} credits to user ${userId}`)
    return
  }

  // Handle subscription checkout
  const customerId = session.customer as string
  
  // Create or update subscription record
  await prisma.subscription.upsert({
    where: { userId },
    create: {
      userId,
      plan: planType,
      status: 'active',
      stripeId: customerId,
      expiresAt: planType === 'lifetime' ? null : calculateExpiryDate(billingInterval)
    },
    update: {
      plan: planType,
      status: 'active',
      stripeId: customerId,
      expiresAt: planType === 'lifetime' ? null : calculateExpiryDate(billingInterval)
    }
  })

  console.log(`Updated subscription for user ${userId} to ${planType}`)
}

async function handleSubscriptionUpdate(subscription: any) {
  const customerId = subscription.customer as string
  
  // Find user by Stripe customer ID
  const userSubscription = await prisma.subscription.findUnique({
    where: { stripeId: customerId }
  })

  if (!userSubscription) {
    console.error(`No subscription found for customer ${customerId}`)
    return
  }

  const status = subscription.status === 'active' ? 'active' : 
                subscription.status === 'canceled' ? 'canceled' : 'expired'

  await prisma.subscription.update({
    where: { id: userSubscription.id },
    data: {
      status,
      expiresAt: subscription.current_period_end ? 
        new Date(subscription.current_period_end * 1000) : null
    }
  })

  console.log(`Updated subscription status to ${status} for customer ${customerId}`)
}

async function handleSubscriptionCanceled(subscription: any) {
  const customerId = subscription.customer as string
  
  const userSubscription = await prisma.subscription.findUnique({
    where: { stripeId: customerId }
  })

  if (!userSubscription) {
    console.error(`No subscription found for customer ${customerId}`)
    return
  }

  await prisma.subscription.update({
    where: { id: userSubscription.id },
    data: {
      status: 'canceled',
      expiresAt: subscription.ended_at ? 
        new Date(subscription.ended_at * 1000) : new Date()
    }
  })

  console.log(`Canceled subscription for customer ${customerId}`)
}

async function handlePaymentSucceeded(invoice: any) {
  const customerId = invoice.customer as string
  
  // Update subscription status to active on successful payment
  const userSubscription = await prisma.subscription.findUnique({
    where: { stripeId: customerId }
  })

  if (userSubscription) {
    await prisma.subscription.update({
      where: { id: userSubscription.id },
      data: {
        status: 'active',
        expiresAt: invoice.period_end ? 
          new Date(invoice.period_end * 1000) : null
      }
    })

    console.log(`Payment succeeded for customer ${customerId}`)
  }
}

async function handlePaymentFailed(invoice: any) {
  const customerId = invoice.customer as string
  
  // Mark subscription as expired on failed payment
  const userSubscription = await prisma.subscription.findUnique({
    where: { stripeId: customerId }
  })

  if (userSubscription) {
    await prisma.subscription.update({
      where: { id: userSubscription.id },
      data: {
        status: 'expired'
      }
    })

    console.log(`Payment failed for customer ${customerId}`)
  }
}

function calculateExpiryDate(billingInterval: string): Date {
  const now = new Date()
  
  if (billingInterval === 'yearly') {
    return new Date(now.setFullYear(now.getFullYear() + 1))
  } else {
    return new Date(now.setMonth(now.getMonth() + 1))
  }
}
